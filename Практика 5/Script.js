/*
Игра «Жизнь».
Игра моделирует жизнь поколений гипотетической колонии живых клеток на прямоугольном игровом поле,
которые выживают, размножаются или погибают в соответствии со следующими правилами.

Для каждого поколения (шага игры) применяются следующие правила: каждая живая клетка, количество
соседей которой меньше двух или больше трёх, погибает; каждая живая клетка, у которой от двух до трёх соседей, 
живёт до следующего хода; каждая мёртвая клетка, у которой есть ровно три соседа, оживает. 
Соседи клетки – это все соседние с ней клетки по горизонтали, вертикали и диагонали, всего восемь соседей.

Правила применяются ко всему игровому полю одновременно, а не к каждой из клеток по очереди.
То есть подсчёт количества соседей происходит в один момент перед следующим шагом, и изменения, происходящие в соседних клетках, не влияют на новое состояние клетки.
Среди прочего использовать возможности, предоставляемые фреймворком jQuery.
*/

//Массив чисел, оторбажающих клетки
var cells;
var count = 0;
var size = 10;

$(function () {
    //Инициализация
    cells = new Array(size);
    for (var i = 0; i < size; i++) {
        cells[i] = new Array(size);
        for(var j = 0; j < size; j++){
            cells[i][j] = 0;
            $("#osmos").append("<img class='cell alive' id='"+idOf(i,j)+"'>");
            $("#osmos").$(idOf(i,j)).toggleClass("dead");
            //$("#osmos > #"+i+"|"+j).css("top", (100.0 * y / size) +'%');
            //$("#"+i+"|"+j).css("left", (100.0 * x / size) +'%');
        }
    }
    
    //Подключение update()
    setTimeout(update, 500);
});

//Функция обновления поколения
function update(){
    
    //счетчик
    count++;
    $("#counter").text(count);
    //повторить через пол секунды
    setTimeout(update, 500);
}

//Функция, считающая количество соседей рядом с клеткой
function countNeighbors(x, y){
    var c = 0;
    
    for(var i = -1; i <= 1; i++){
        for(var j = -1; j <= 1; j++){
            var nx = x + i;
            var ny = y + j;
            if(nx >= 0 && nx < size && ny >= 0 && ny < size && cells[nx][ny] == 1){
                c = c + 1;
            }
        }
    }
    return x + y;
}

function idOf(x,y){
    return "(" + (x * size + y) + ")"
}